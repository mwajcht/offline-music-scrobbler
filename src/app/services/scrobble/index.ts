import { PlayedTrack, Scrobbles } from '@core/pages/main/namespace';
import ApiService from '../config';

function getParameterName(parameter: string, index: number) {
  return `${parameter}[${index}]`;
}

function getSignature(body: URLSearchParams): string {
  const md5 = require('md5');
  let toSign = '';
  body.forEach((value, key) => {
    toSign += key.concat(value);
  });
  toSign += process.env.API_SECRET;
  return md5(toSign);
}

/**
 * up to a maximum of 50 scrobbles per batch [0<=i<=49]
 * Extra care should be taken while calculating the signature when using array notation as the parameter names
 * MUST be sorted according to the ASCII table (i.e., artist[10] comes before artist[1]).
 *
 * artist[i] (Required) : The artist name.
 * track[i] (Required) : The track name.
 * timestamp[i] (Required) : The time the track started playing, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
 * album[i] (Optional) : The album name.
 * context[i] (Optional) : Sub-client version (not public, only enabled for certain API keys)
 * streamId[i] (Optional) : The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio
 * chosenByUser[i] (Optional) : Set to 1 if the user chose this song, or 0 if the song was chosen by someone else (such as a radio station or recommendation service). Assumes 1 if not specified
 * trackNumber[i] (Optional) : The track number of the track on the album.
 * mbid[i] (Optional) : The MusicBrainz Track ID.
 * albumArtist[i] (Optional) : The album artist - if this differs from the track artist.
 * duration[i] (Optional) : The length of the track in seconds.
 * api_key (Required) : A Last.fm API key.
 * api_sig (Required) : A Last.fm method signature. See authentication for more information.
 * sk (Required) : A session key generated by authenticating a user via the authentication protocol.
 *
 * @param payload
 */
export const getScrobbleService = (payload: {
  tracks: PlayedTrack[];
  sessionKey: string;
}) => {
  const body = new URLSearchParams();
  body.set('method', 'track.scrobble');
  body.set('sk', payload.sessionKey);
  body.set('api_key', process.env.API_KEY as string);
  let playTimestamp = Math.round(new Date().getTime() / 1000); // seconds since Epoch
  // TODO make multiple calls when there is more than 50 tracks to scrobble
  for (let i = payload.tracks.length - 1; i >= 0; i -= 1) {
    playTimestamp -= payload.tracks[i].duration;
    const track = payload.tracks[i];
    body.set(getParameterName('artist', i), track.artist);
    body.set(getParameterName('album', i), track.album);
    body.set(getParameterName('track', i), track.track);
    body.set(getParameterName('duration', i), track.duration.toString());
    body.set(getParameterName('timestamp', i), playTimestamp.toString());
  }
  body.sort();
  body.set('api_sig', getSignature(body));
  body.set('format', 'json');

  return ApiService.post<Scrobbles>('/', body, {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
  }).then(response => {
    return response.data;
  });
};
